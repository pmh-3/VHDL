Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;



entity adder IS PORT(
	a: IN std_logic
	b: IN std_logic
	ci: IN std_logic
	c: OUT std_logic
	co: OUT std_logic
	);
end entitiy adder;

Architecture structure OF adder IS
BEGIN
inputs <= a&b&ci;
with inputs select
	c <= '1' when "001",
	     '1' when "010",
	     '1' when "100",
	     '1' when "111",
	     '0' when others;
with inputs select
	co <= '1' when "011",
	      '1' when "101",
	      '1' when "110",
	      '1' when "111",
	      '0' when others;
end structure;

Library ieee;
Use ieee.std_logic_1164.all;

entity adder_subtracter is 
port( datain_a: in std_logic_vector(31 downto 0);
	datain_b: in std_logic_vector(31 downto 0);
	add_sub: in std_logic;
	dataout_as: out std_logic_vector(31 downto o);
	co: out std_logic);
end entity adder_subtracter;

Architecture plus_minus of adder_subtracter is 

COMPONENT adder IS PORT(
	a: IN std_logic;
	b: IN std_logic;
	ci: IN std_logic;
	c: OUT std_logic;
	co: OUT std_logic);
END COMPONENT;

SIGNAL carryLine: std_logic_vector(31 downto 0);
SIGNAL ToBeOrNotToBe: std_logic_vector(30 downto 0);
SIGNAL addsubSwitch: std_logic_vector(30 downto 0);

BEGIN
addsubSwitch <= (others=>add_sub);
ToBeOrNotToBe <= (datain_b and not(addsubSwitch)) or (not(datain_b) and addsubSwitch);
carryLine(0) <= addsubSwitch

FOR I in 0 to 30 GENERATE

P(I+1): adder PORT MAP(
	a=> datain_a(I),
	b=> ToBeOrNotToBe(I),
	ci=> carryLine(I),
	c => dataout_as(I),
	co => carryLine(I+1)
);
END GENERATE;
co <= carryLine(31)
END plus_minus;


entity test_bench is
end entity;


entity shift_register is 
port( datain: in std_logic_vector(31 downto 0);
	dir: in std_logic;
	shamt: in std_logic_vector(5 downto o);
	dataout_shreg: out std_logic_vector(31 downto 0));
end entity shift_register;

entity ALU is 
	Port(DataIn1,DataIn2: in std_logic_vector(31 downto 0);
	Control: in std_logic_vector(4 downto 0);
	Shift_dir: in std_logic;
	Shift_amount: in std_logic_vector(5 downto 0);
	Negative, Zero, Overflow, Carry: out std_logic;
	ALUResult: out std_logic_vector(31 downto 0) );
end entity ALU;

Architecture num of ALU is 
	component adder_subtracter
		port( datain_a: in std_logic_vector(31 downto 0);
			datain_b: in std_logic_vector(31 downto 0);
			add_sub: in std_logic;
			dataout_as: out std_logic_vector(31 downto o);
			co: out std_logic);
	end component;
	
	component shift_register 
		port( datain: in std_logic_vector(31 downto 0);
			dir: in std_logic;
			shamt: in std_logic_vector(5 downto o);
			dataout_shreg: out std_logic_vector(31 downto 0));
	end component;
